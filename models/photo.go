// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Photo 返回的图片信息
// swagger:model Photo
type Photo struct {

	// 大图
	Large string `json:"large,omitempty"`

	// 中图
	Middle string `json:"middle,omitempty"`

	// 原图
	Origin string `json:"origin,omitempty"`

	// 图片ID
	// Required: true
	PhotoID *int64 `json:"photo_id"`

	// 圆图(头像)
	Round string `json:"round,omitempty"`

	// 小图
	Small string `json:"small,omitempty"`

	// 文件类型，后缀
	Type string `json:"type,omitempty"`
}

// Validate validates this photo
func (m *Photo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePhotoID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Photo) validatePhotoID(formats strfmt.Registry) error {

	if err := validate.Required("photo_id", "body", m.PhotoID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Photo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Photo) UnmarshalBinary(b []byte) error {
	var res Photo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
