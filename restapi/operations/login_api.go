// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"Login/restapi/operations/file_upload"
	"Login/restapi/operations/passport"
	"Login/restapi/operations/user"
)

// NewLoginAPI creates a new Login instance
func NewLoginAPI(spec *loads.Document) *LoginAPI {
	return &LoginAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		FileUploadNrFileUploadHandler: file_upload.NrFileUploadHandlerFunc(func(params file_upload.NrFileUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation FileUploadNrFileUpload has not yet been implemented")
		}),
		PassportNrPassportBindMobileHandler: passport.NrPassportBindMobileHandlerFunc(func(params passport.NrPassportBindMobileParams) middleware.Responder {
			return middleware.NotImplemented("operation PassportNrPassportBindMobile has not yet been implemented")
		}),
		PassportNrPassportGetbackPwdHandler: passport.NrPassportGetbackPwdHandlerFunc(func(params passport.NrPassportGetbackPwdParams) middleware.Responder {
			return middleware.NotImplemented("operation PassportNrPassportGetbackPwd has not yet been implemented")
		}),
		PassportNrPassportLoginHandler: passport.NrPassportLoginHandlerFunc(func(params passport.NrPassportLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation PassportNrPassportLogin has not yet been implemented")
		}),
		PassportNrPassportLoginByThirdPartyHandler: passport.NrPassportLoginByThirdPartyHandlerFunc(func(params passport.NrPassportLoginByThirdPartyParams) middleware.Responder {
			return middleware.NotImplemented("operation PassportNrPassportLoginByThirdParty has not yet been implemented")
		}),
		PassportNrPassportQuickLoginHandler: passport.NrPassportQuickLoginHandlerFunc(func(params passport.NrPassportQuickLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation PassportNrPassportQuickLogin has not yet been implemented")
		}),
		PassportNrPassportRegisterHandler: passport.NrPassportRegisterHandlerFunc(func(params passport.NrPassportRegisterParams) middleware.Responder {
			return middleware.NotImplemented("operation PassportNrPassportRegister has not yet been implemented")
		}),
		PassportNrPassportSendSmsHandler: passport.NrPassportSendSmsHandlerFunc(func(params passport.NrPassportSendSmsParams) middleware.Responder {
			return middleware.NotImplemented("operation PassportNrPassportSendSms has not yet been implemented")
		}),
		UserNrUserGetOwnerAccountHandler: user.NrUserGetOwnerAccountHandlerFunc(func(params user.NrUserGetOwnerAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserGetOwnerAccount has not yet been implemented")
		}),
		UserNrUserUpdateAvatarHandler: user.NrUserUpdateAvatarHandlerFunc(func(params user.NrUserUpdateAvatarParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserUpdateAvatar has not yet been implemented")
		}),
		UserNrUserUpdateProfileHandler: user.NrUserUpdateProfileHandlerFunc(func(params user.NrUserUpdateProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserUpdateProfile has not yet been implemented")
		}),
		UserNrUserUpdatePwdHandler: user.NrUserUpdatePwdHandlerFunc(func(params user.NrUserUpdatePwdParams) middleware.Responder {
			return middleware.NotImplemented("operation UserNrUserUpdatePwd has not yet been implemented")
		}),
	}
}

/*LoginAPI 通用授权模块 */
type LoginAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// FileUploadNrFileUploadHandler sets the operation handler for the file upload operation
	FileUploadNrFileUploadHandler file_upload.NrFileUploadHandler
	// PassportNrPassportBindMobileHandler sets the operation handler for the passport bind mobile operation
	PassportNrPassportBindMobileHandler passport.NrPassportBindMobileHandler
	// PassportNrPassportGetbackPwdHandler sets the operation handler for the passport getback pwd operation
	PassportNrPassportGetbackPwdHandler passport.NrPassportGetbackPwdHandler
	// PassportNrPassportLoginHandler sets the operation handler for the passport login operation
	PassportNrPassportLoginHandler passport.NrPassportLoginHandler
	// PassportNrPassportLoginByThirdPartyHandler sets the operation handler for the passport login by third party operation
	PassportNrPassportLoginByThirdPartyHandler passport.NrPassportLoginByThirdPartyHandler
	// PassportNrPassportQuickLoginHandler sets the operation handler for the passport quick login operation
	PassportNrPassportQuickLoginHandler passport.NrPassportQuickLoginHandler
	// PassportNrPassportRegisterHandler sets the operation handler for the passport register operation
	PassportNrPassportRegisterHandler passport.NrPassportRegisterHandler
	// PassportNrPassportSendSmsHandler sets the operation handler for the passport send sms operation
	PassportNrPassportSendSmsHandler passport.NrPassportSendSmsHandler
	// UserNrUserGetOwnerAccountHandler sets the operation handler for the user get owner account operation
	UserNrUserGetOwnerAccountHandler user.NrUserGetOwnerAccountHandler
	// UserNrUserUpdateAvatarHandler sets the operation handler for the user update avatar operation
	UserNrUserUpdateAvatarHandler user.NrUserUpdateAvatarHandler
	// UserNrUserUpdateProfileHandler sets the operation handler for the user update profile operation
	UserNrUserUpdateProfileHandler user.NrUserUpdateProfileHandler
	// UserNrUserUpdatePwdHandler sets the operation handler for the user update pwd operation
	UserNrUserUpdatePwdHandler user.NrUserUpdatePwdHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *LoginAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *LoginAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *LoginAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *LoginAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *LoginAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *LoginAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *LoginAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the LoginAPI
func (o *LoginAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.FileUploadNrFileUploadHandler == nil {
		unregistered = append(unregistered, "file_upload.NrFileUploadHandler")
	}

	if o.PassportNrPassportBindMobileHandler == nil {
		unregistered = append(unregistered, "passport.NrPassportBindMobileHandler")
	}

	if o.PassportNrPassportGetbackPwdHandler == nil {
		unregistered = append(unregistered, "passport.NrPassportGetbackPwdHandler")
	}

	if o.PassportNrPassportLoginHandler == nil {
		unregistered = append(unregistered, "passport.NrPassportLoginHandler")
	}

	if o.PassportNrPassportLoginByThirdPartyHandler == nil {
		unregistered = append(unregistered, "passport.NrPassportLoginByThirdPartyHandler")
	}

	if o.PassportNrPassportQuickLoginHandler == nil {
		unregistered = append(unregistered, "passport.NrPassportQuickLoginHandler")
	}

	if o.PassportNrPassportRegisterHandler == nil {
		unregistered = append(unregistered, "passport.NrPassportRegisterHandler")
	}

	if o.PassportNrPassportSendSmsHandler == nil {
		unregistered = append(unregistered, "passport.NrPassportSendSmsHandler")
	}

	if o.UserNrUserGetOwnerAccountHandler == nil {
		unregistered = append(unregistered, "user.NrUserGetOwnerAccountHandler")
	}

	if o.UserNrUserUpdateAvatarHandler == nil {
		unregistered = append(unregistered, "user.NrUserUpdateAvatarHandler")
	}

	if o.UserNrUserUpdateProfileHandler == nil {
		unregistered = append(unregistered, "user.NrUserUpdateProfileHandler")
	}

	if o.UserNrUserUpdatePwdHandler == nil {
		unregistered = append(unregistered, "user.NrUserUpdatePwdHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *LoginAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *LoginAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *LoginAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *LoginAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *LoginAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *LoginAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the login API
func (o *LoginAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *LoginAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/file/upload"] = file_upload.NewNrFileUpload(o.context, o.FileUploadNrFileUploadHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/passport/bindMobile"] = passport.NewNrPassportBindMobile(o.context, o.PassportNrPassportBindMobileHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/passport/getbackPwd"] = passport.NewNrPassportGetbackPwd(o.context, o.PassportNrPassportGetbackPwdHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/passport/login"] = passport.NewNrPassportLogin(o.context, o.PassportNrPassportLoginHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/passport/loginByThirdParty"] = passport.NewNrPassportLoginByThirdParty(o.context, o.PassportNrPassportLoginByThirdPartyHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/passport/quickLogin"] = passport.NewNrPassportQuickLogin(o.context, o.PassportNrPassportQuickLoginHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/passport/register"] = passport.NewNrPassportRegister(o.context, o.PassportNrPassportRegisterHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/passport/sendSms"] = passport.NewNrPassportSendSms(o.context, o.PassportNrPassportSendSmsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/getOwnerAccount"] = user.NewNrUserGetOwnerAccount(o.context, o.UserNrUserGetOwnerAccountHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/updateAvatar"] = user.NewNrUserUpdateAvatar(o.context, o.UserNrUserUpdateAvatarHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/updateProfile"] = user.NewNrUserUpdateProfile(o.context, o.UserNrUserUpdateProfileHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user/updatePwd"] = user.NewNrUserUpdatePwd(o.context, o.UserNrUserUpdatePwdHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *LoginAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *LoginAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
