// Code generated by go-swagger; DO NOT EDIT.

package passport

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_"github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"Passport/models"
	"Passport/utils"
	"fmt"
	"time"
)

// NrPassportLoginByThirdPartyHandlerFunc turns a function with the right signature into a passport login by third party handler
type NrPassportLoginByThirdPartyHandlerFunc func(NrPassportLoginByThirdPartyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrPassportLoginByThirdPartyHandlerFunc) Handle(params NrPassportLoginByThirdPartyParams) middleware.Responder {
	return fn(params)
}

// NrPassportLoginByThirdPartyHandler interface for that can handle valid passport login by third party params
type NrPassportLoginByThirdPartyHandler interface {
	Handle(NrPassportLoginByThirdPartyParams) middleware.Responder
}

// NewNrPassportLoginByThirdParty creates a new http.Handler for the passport login by third party operation
func NewNrPassportLoginByThirdParty(ctx *middleware.Context, handler NrPassportLoginByThirdPartyHandler) *NrPassportLoginByThirdParty {
	return &NrPassportLoginByThirdParty{Context: ctx, Handler: handler}
}

/*NrPassportLoginByThirdParty swagger:route POST /passport/loginByThirdParty Passport passportLoginByThirdParty

第三方登录

第三方登录

*/
type NrPassportLoginByThirdParty struct {
	Context *middleware.Context
	Handler NrPassportLoginByThirdPartyHandler
}

func (o *NrPassportLoginByThirdParty) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrPassportLoginByThirdPartyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	//res := o.Handler.Handle(Params) // actually handle the request

	db, err := utils.OpenConnection()
	if err != nil {
		fmt.Println(err.Error())
	}
	defer db.Close()

	var res models.LoginState
	var state models.State
	var user models.UserBase

	var code int64
	var message string

	db.Table(utils.T_USER).Where("open_id=?", *Params.Body.OpenID).Where("platform=?", *Params.Body.Platform).First(&user)
	// 判断是否已经存在用户信息，存在则返回这个用户信息
	if user.ID != 0 {
		// 修改最后一次登录时间
		sql := "UPDATE btk_User SET login_at = ? WHERE id = ? AND status = 0"
		db.Exec(sql, time.Now().Unix(), user.ID)
	} else {
		sql := "INSERT INTO btk_User(nick_name, avatar, platform, login_at, register_at) VALUES (?,?,?,?,?)"
		db.Exec(sql, Params.Body.Name, Params.Body.Avatar, *Params.Body.Platform, time.Now().Unix(), time.Now().Unix())
		// 写完之后再查询一次，保证用户存在
		db.Table(utils.T_USER).Where("open_id=?", *Params.Body.OpenID).Where("platform=?", *Params.Body.Platform).First(&user)
	}

	if user.ID != 0 {

		user.Avatar = utils.CompleteImage(user.Avatar)
		user.Euid = utils.EncryptEuid(user.ID)
		user.ID = 0
		user.Password = ""
		res.Data = &user

		code = 200
		message = "登录成功"
		state.UnmarshalBinary([]byte(utils.Response200(code, message)))
		res.State = &state
	} else {
		code = 301
		message = "用户不存在"
		state.UnmarshalBinary([]byte(utils.Response200(code, message)))
		res.State = &state
	}

	o.Context.Respond(rw, r, route.Produces, route, res)

}
