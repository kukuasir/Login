// Code generated by go-swagger; DO NOT EDIT.

package passport

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"Login/models"
)

// PassportLoginByThirdPartyOKCode is the HTTP code returned for type PassportLoginByThirdPartyOK
const PassportLoginByThirdPartyOKCode int = 200

/*PassportLoginByThirdPartyOK 返回登录成功信息

swagger:response passportLoginByThirdPartyOK
*/
type PassportLoginByThirdPartyOK struct {

	/*
	  In: Body
	*/
	Payload *models.LoginState `json:"body,omitempty"`
}

// NewPassportLoginByThirdPartyOK creates PassportLoginByThirdPartyOK with default headers values
func NewPassportLoginByThirdPartyOK() *PassportLoginByThirdPartyOK {
	return &PassportLoginByThirdPartyOK{}
}

// WithPayload adds the payload to the passport login by third party o k response
func (o *PassportLoginByThirdPartyOK) WithPayload(payload *models.LoginState) *PassportLoginByThirdPartyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the passport login by third party o k response
func (o *PassportLoginByThirdPartyOK) SetPayload(payload *models.LoginState) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PassportLoginByThirdPartyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*NrPassportLoginByThirdPartyDefault error

swagger:response passportLoginByThirdPartyDefault
*/
type NrPassportLoginByThirdPartyDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewNrPassportLoginByThirdPartyDefault creates NrPassportLoginByThirdPartyDefault with default headers values
func NewNrPassportLoginByThirdPartyDefault(code int) *NrPassportLoginByThirdPartyDefault {
	if code <= 0 {
		code = 500
	}

	return &NrPassportLoginByThirdPartyDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the passport login by third party default response
func (o *NrPassportLoginByThirdPartyDefault) WithStatusCode(code int) *NrPassportLoginByThirdPartyDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the passport login by third party default response
func (o *NrPassportLoginByThirdPartyDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the passport login by third party default response
func (o *NrPassportLoginByThirdPartyDefault) WithPayload(payload *models.Error) *NrPassportLoginByThirdPartyDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the passport login by third party default response
func (o *NrPassportLoginByThirdPartyDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NrPassportLoginByThirdPartyDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
