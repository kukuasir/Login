// Code generated by go-swagger; DO NOT EDIT.

package passport

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_"github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"Passport/models"
	"Passport/utils"
	"fmt"
	"time"
)

// NrPassportLoginHandlerFunc turns a function with the right signature into a passport login handler
type NrPassportLoginHandlerFunc func(NrPassportLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrPassportLoginHandlerFunc) Handle(params NrPassportLoginParams) middleware.Responder {
	return fn(params)
}

// NrPassportLoginHandler interface for that can handle valid passport login params
type NrPassportLoginHandler interface {
	Handle(NrPassportLoginParams) middleware.Responder
}

// NewNrPassportLogin creates a new http.Handler for the passport login operation
func NewNrPassportLogin(ctx *middleware.Context, handler NrPassportLoginHandler) *NrPassportLogin {
	return &NrPassportLogin{Context: ctx, Handler: handler}
}

/*NrPassportLogin swagger:route POST /passport/login Passport passportLogin

登录接口

登录接口

*/
type NrPassportLogin struct {
	Context *middleware.Context
	Handler NrPassportLoginHandler
}

func (o *NrPassportLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrPassportLoginParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	//res := o.Handler.Handle(Params) // actually handle the request

	db, err := utils.OpenConnection()
	if err != nil {
		fmt.Println(err.Error())
	}
	defer db.Close()

	var res models.LoginState
	var user models.UserBase
	var state models.State

	var code int64
	var message string

	db.Table(utils.T_USER).Where("phone=?", *Params.Body.Phone).Where("password=?", utils.MD5Encrypt(*Params.Body.Password)).Where("status=0").First(&user)
	if user.ID == 0 {
		code = 301
		message = "账号或密码错误"
	} else {

		// 修改最后一次登录时间
		user.LoginAt = time.Now().Unix()
		db.Table(utils.T_USER).Save(&user)

		code = 200
		message = "登录成功"

		user.Avatar = utils.CompleteImage(user.Avatar)
		user.Euid = utils.EncryptEuid(user.ID)
		user.ID = 0
		res.Data = &user
	}

	state.UnmarshalBinary([]byte(utils.Response200(code, message)))
	res.State = &state

	o.Context.Respond(rw, r, route.Produces, route, res)

}
