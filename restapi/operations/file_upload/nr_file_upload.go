// Code generated by go-swagger; DO NOT EDIT.

package file_upload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	"Login/models"
)

// NrFileUploadHandlerFunc turns a function with the right signature into a file upload handler
type NrFileUploadHandlerFunc func(NrFileUploadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrFileUploadHandlerFunc) Handle(params NrFileUploadParams) middleware.Responder {
	return fn(params)
}

// NrFileUploadHandler interface for that can handle valid file upload params
type NrFileUploadHandler interface {
	Handle(NrFileUploadParams) middleware.Responder
}

// NewNrFileUpload creates a new http.Handler for the file upload operation
func NewNrFileUpload(ctx *middleware.Context, handler NrFileUploadHandler) *NrFileUpload {
	return &NrFileUpload{Context: ctx, Handler: handler}
}

/*NrFileUpload swagger:route POST /file/upload FileUpload fileUpload

文件上传

*/
type NrFileUpload struct {
	Context *middleware.Context
	Handler NrFileUploadHandler
}

func (o *NrFileUpload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrFileUploadParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	//res := o.Handler.Handle(Params) // actually handle the request

	var res models.FileUploadOKBody

	o.Context.Respond(rw, r, route.Produces, route, res)

}
