// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm/dialects/mysql"
	"github.com/go-openapi/runtime/middleware"
	"Passport/models"
	"Passport/utils"
	"fmt"
)

// NrUserUpdatePwdHandlerFunc turns a function with the right signature into a user update pwd handler
type NrUserUpdatePwdHandlerFunc func(NrUserUpdatePwdParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrUserUpdatePwdHandlerFunc) Handle(params NrUserUpdatePwdParams) middleware.Responder {
	return fn(params)
}

// NrUserUpdatePwdHandler interface for that can handle valid user update pwd params
type NrUserUpdatePwdHandler interface {
	Handle(NrUserUpdatePwdParams) middleware.Responder
}

// NewNrUserUpdatePwd creates a new http.Handler for the user update pwd operation
func NewNrUserUpdatePwd(ctx *middleware.Context, handler NrUserUpdatePwdHandler) *NrUserUpdatePwd {
	return &NrUserUpdatePwd{Context: ctx, Handler: handler}
}

/*NrUserUpdatePwd swagger:route POST /user/updatePwd User userUpdatePwd

修改密码接口

*/
type NrUserUpdatePwd struct {
	Context *middleware.Context
	Handler NrUserUpdatePwdHandler
}

func (o *NrUserUpdatePwd) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrUserUpdatePwdParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	//res := o.Handler.Handle(Params) // actually handle the request

	db, err := utils.OpenConnection()
	if err != nil {
		fmt.Println(err.Error())
	}
	defer db.Close()

	var res models.RespState
	var state models.State
	var user models.UserBase

	// 定义错误信息
	var code int64
	var message string

	// 先校验手机号与旧密码是否正确
	db.Table(utils.T_USER).Where("phone=?", *Params.Body.Phone).Where("password=?", utils.MD5Encrypt(*Params.Body.OldPwd)).First(&user)
	if user.Euid == nil {
		code = 403
		message = "手机号不存在或密码错误"
	} else {
		sql := "UPDATE btk_User SET password = ? WHERE phone = ? AND status = 0"
		db.Exec(sql, utils.MD5Encrypt(*Params.Body.NewPwd), *Params.Body.Phone)
		code = 200
		message = "修改成功"
	}

	state.UnmarshalBinary([]byte(utils.Response200(code, message)))
	res.State = &state

	o.Context.Respond(rw, r, route.Produces, route, res)

}
