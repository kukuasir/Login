// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	graceful "github.com/tylerb/graceful"

	"Login/restapi/operations"
	"Login/restapi/operations/file_upload"
	"Login/restapi/operations/passport"
	"Login/restapi/operations/user"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target .. --name  --spec ../Login_1.0.0_swagger.json

func configureFlags(api *operations.LoginAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.LoginAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.MultipartformConsumer = runtime.DiscardConsumer

	api.JSONProducer = runtime.JSONProducer()

	api.FileUploadNrFileUploadHandler = file_upload.NrFileUploadHandlerFunc(func(params file_upload.NrFileUploadParams) middleware.Responder {
		return middleware.NotImplemented("operation file_upload.NrFileUpload has not yet been implemented")
	})
	api.PassportNrPassportBindMobileHandler = passport.NrPassportBindMobileHandlerFunc(func(params passport.NrPassportBindMobileParams) middleware.Responder {
		return middleware.NotImplemented("operation passport.NrPassportBindMobile has not yet been implemented")
	})
	api.PassportNrPassportGetbackPwdHandler = passport.NrPassportGetbackPwdHandlerFunc(func(params passport.NrPassportGetbackPwdParams) middleware.Responder {
		return middleware.NotImplemented("operation passport.NrPassportGetbackPwd has not yet been implemented")
	})
	api.PassportNrPassportLoginHandler = passport.NrPassportLoginHandlerFunc(func(params passport.NrPassportLoginParams) middleware.Responder {
		return middleware.NotImplemented("operation passport.NrPassportLogin has not yet been implemented")
	})
	api.PassportNrPassportLoginByThirdPartyHandler = passport.NrPassportLoginByThirdPartyHandlerFunc(func(params passport.NrPassportLoginByThirdPartyParams) middleware.Responder {
		return middleware.NotImplemented("operation passport.NrPassportLoginByThirdParty has not yet been implemented")
	})
	api.PassportNrPassportQuickLoginHandler = passport.NrPassportQuickLoginHandlerFunc(func(params passport.NrPassportQuickLoginParams) middleware.Responder {
		return middleware.NotImplemented("operation passport.NrPassportQuickLogin has not yet been implemented")
	})
	api.PassportNrPassportRegisterHandler = passport.NrPassportRegisterHandlerFunc(func(params passport.NrPassportRegisterParams) middleware.Responder {
		return middleware.NotImplemented("operation passport.NrPassportRegister has not yet been implemented")
	})
	api.PassportNrPassportSendSmsHandler = passport.NrPassportSendSmsHandlerFunc(func(params passport.NrPassportSendSmsParams) middleware.Responder {
		return middleware.NotImplemented("operation passport.NrPassportSendSms has not yet been implemented")
	})
	api.UserNrUserGetOwnerAccountHandler = user.NrUserGetOwnerAccountHandlerFunc(func(params user.NrUserGetOwnerAccountParams) middleware.Responder {
		return middleware.NotImplemented("operation user.NrUserGetOwnerAccount has not yet been implemented")
	})
	api.UserNrUserUpdateAvatarHandler = user.NrUserUpdateAvatarHandlerFunc(func(params user.NrUserUpdateAvatarParams) middleware.Responder {
		return middleware.NotImplemented("operation user.NrUserUpdateAvatar has not yet been implemented")
	})
	api.UserNrUserUpdateProfileHandler = user.NrUserUpdateProfileHandlerFunc(func(params user.NrUserUpdateProfileParams) middleware.Responder {
		return middleware.NotImplemented("operation user.NrUserUpdateProfile has not yet been implemented")
	})
	api.UserNrUserUpdatePwdHandler = user.NrUserUpdatePwdHandlerFunc(func(params user.NrUserUpdatePwdParams) middleware.Responder {
		return middleware.NotImplemented("operation user.NrUserUpdatePwd has not yet been implemented")
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
